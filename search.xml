<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TTCP的三次握手与四次挥手</title>
      <link href="/2020/02/10/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2020/02/10/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch搜索框搜索详解</title>
      <link href="/2019/12/08/ElasticSearch%E6%90%9C%E7%B4%A2%E6%A1%86%E6%90%9C%E7%B4%A2%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/12/08/ElasticSearch%E6%90%9C%E7%B4%A2%E6%A1%86%E6%90%9C%E7%B4%A2%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<center>elasticSearch使用总结</center>elasticsearch结合springboot对当前数据进行分桶聚合查询<a id="more"></a><h1 id="一、分页查询"><a href="#一、分页查询" class="headerlink" title="一、分页查询"></a>一、分页查询</h1><h2 id="1，页面查询"><a href="#1，页面查询" class="headerlink" title="1，页面查询"></a>1，页面查询</h2><p>仅用关键字进行分页查询<br>建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NativeSearchQueryBuilder queryBuilder  = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br></pre></td></tr></table></figure><h2 id="2-接收到前端传来的查询对象"><a href="#2-接收到前端传来的查询对象" class="headerlink" title="2, 接收到前端传来的查询对象"></a>2, 接收到前端传来的查询对象</h2><p><code>searchRequest</code>，同时判定查询内容是否为空</p><p>前端数据对象searchRequest有</p><ul><li>page - 页面</li><li>key - 查询关键字</li><li>filter - 查询过滤条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String key = searchRequest.getKey();</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(key)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.INVLID_ERROR)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3，filter查询"><a href="#3，filter查询" class="headerlink" title="3，filter查询"></a>3，filter查询</h2><p>需要在bool查询中进行</p><h3 id="kibana中书写格式"><a href="#kibana中书写格式" class="headerlink" title="kibana中书写格式"></a>kibana中书写格式</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET goods/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"brandId"</span>:<span class="number">8557</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"filter"</span>: &#123;</span><br><span class="line">          <span class="attr">"range"</span>: &#123;</span><br><span class="line">            <span class="attr">"price"</span>: &#123;</span><br><span class="line">              <span class="attr">"gte"</span>: <span class="number">1499</span>,</span><br><span class="line">              <span class="attr">"lte"</span>: <span class="number">99999</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java中书写格式"><a href="#Java中书写格式" class="headerlink" title="Java中书写格式"></a>Java中书写格式</h3><p>参照之下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先拿到bool的过滤器对象</span></span><br><span class="line">QueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加查询条件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">本例中，all为插入时的字段，即，可搜索字段，其余字段均为不可搜索仅展示字段。所以用户输入的key，只能在all所拥有的关键字中进行搜索。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">"all"</span>, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">全部查询完毕，得到所有符合条件的查询之后，再将过滤条件带入其中，得到完整的符合查询条件的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先拿到所有的过滤条件</span></span><br><span class="line">Map&lt;String, String&gt; filter = searchRequest.getFilter();</span><br></pre></td></tr></table></figure><h3 id="该例中所有的filter的种类"><a href="#该例中所有的filter的种类" class="headerlink" title="该例中所有的filter的种类"></a>该例中所有的filter的种类</h3><p><img src="https://i.loli.net/2020/01/08/c1hCVm4ykdXi3YR.png" alt="01_可搜索与可聚合字段.png"></p><h3 id="分辨搜索关键字所属字段"><a href="#分辨搜索关键字所属字段" class="headerlink" title="分辨搜索关键字所属字段"></a>分辨搜索关键字所属字段</h3><p>如上图所示，即是取出所有filter之后的内容</p><p>下面的filter种类只会在这些名字中出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">取出过滤条件，并由键值，判断是什么样的过滤条件</span></span><br><span class="line"><span class="comment">如果是categoryId或categoryId这种一般条件，则直接添加给key1即可，如果是secs.cpu品牌.keyword这种对象条件，则需要拼接。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">filter.forEach((key1, value) -&gt; &#123;</span><br><span class="line">    <span class="comment">//先判断是否为品牌</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"品牌"</span>.equal(key1)) &#123;</span><br><span class="line">        key1 = <span class="string">"brandId"</span>;</span><br><span class="line">      <span class="comment">//再判断是否为分类</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"分类"</span>.equal(key1)) &#123;</span><br><span class="line">        key1 = <span class="string">"categoryId"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//如若二者皆不是，那么就是specs中的选项，那么要进行拼接</span></span><br><span class="line">        key1 = <span class="string">"specs."</span> + key1 + <span class="string">".keyword"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三种情况都判定完之后，key1肯定属于某一种，也就是拿到了过滤的条件，那么可以向bool过滤器中添加条件</span></span><br><span class="line">    boolQueryBuilder.filter(QueryBuilders.termQuery(key1,value));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="整合bool"><a href="#整合bool" class="headerlink" title="整合bool"></a>整合bool</h3><p>将bool的queryBuilder放入到自定义的查询工具中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryBuilder.withQuery(boolQueryBuilder);</span><br></pre></td></tr></table></figure><p>由于调用的是springData接口<br>在springData中，分页是从0开始分页的，而在实际传参中，最小的页码是1，故这里需要-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AggregatedPage&lt;Goods&gt; goodsAggregatedPage = <span class="keyword">this</span>.esTemplate.queryForPage(queryBuilder.builder(), Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>用户在首页输入完查询字段之后，按下搜索按钮，第一阶段的显示已经查询完毕，后面的</p><p><img src="https://i.loli.net/2020/01/08/sHcXuWh1eOwJAtC.png" alt="02_搜索过滤界面.png"></p><p>类似于这样的搜索过滤界面，由页面加载完成后，axios的异步请求再一次展示。同时该axios也可以触发用户的点选操作。</p><h2 id="4-返回前端数据"><a href="#4-返回前端数据" class="headerlink" title="4, 返回前端数据"></a>4, 返回前端数据</h2><p>现在做第一次返回给前端页面的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(goodsAggregatedPage.getTotalElements(), goodsAggregatedPage.getTotalPages(), goodsAggregatedPage.getContent());</span><br></pre></td></tr></table></figure><h1 id="二、规格参数查询"><a href="#二、规格参数查询" class="headerlink" title="二、规格参数查询"></a>二、规格参数查询</h1><h2 id="1-元素构成分析"><a href="#1-元素构成分析" class="headerlink" title="1, 元素构成分析"></a>1, 元素构成分析</h2><p><img src="https://i.loli.net/2020/01/08/Qkt3s1Cu6DRjrFh.png" alt="03_搜索过滤界面分析.png"></p><p>没有合适的类去存放这些类型。故，今次使用map做返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里选择List&lt;?&gt;用这样一个占位符，而不是使用List&lt;Object&gt;。是因为这里涉及到的类大多数我们自定义的类，而我们自定义的类在创建的时候，并没有让类继承/实现Object这个超类，故在使用我们自建类的时候，可能会出现问题。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;?&gt;&gt; filterQuery(SearchRequest searchRequest) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2，新建自定义查询类"><a href="#2，新建自定义查询类" class="headerlink" title="2，新建自定义查询类"></a>2，新建自定义查询类</h2><p>这里与第一次查询一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br></pre></td></tr></table></figure><p>而后与前一次一样，利用bool对界面做一次查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String key = searchQuery.getKey();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(key)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.INVLID_ERROR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kibana中filter需要在bool之内进行过滤/筛选</p><p>故Java中使用filter时，需要新建一个bool类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br></pre></td></tr></table></figure><h2 id="3，添加查询条件"><a href="#3，添加查询条件" class="headerlink" title="3，添加查询条件"></a>3，添加查询条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加查询条件</span></span><br><span class="line">queryBuilder.must(QueryBuilders.matchQuery(<span class="string">"all"</span>, key).operator(Operator.AND));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取请求提交的所有的过滤条件</span></span><br><span class="line">Map&lt;String, String&gt; filter = searchRequest.getFilter();</span><br><span class="line"></span><br><span class="line"> filter.entrySet().forEach(filterEntry-&gt;&#123;</span><br><span class="line">     String key1 = filterEntry.getKey();</span><br><span class="line"> String value1 = filterEntry.getValue();</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"品牌"</span>.equals(key1))&#123;</span><br><span class="line">          key1 = <span class="string">"brandId"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"分类"</span>.equals(key1))&#123;</span><br><span class="line">          key1 = <span class="string">"categoryId"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          key1 = <span class="string">"specs."</span>+key1+<span class="string">".keyword"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//添加过滤条件</span></span><br><span class="line">boolQueryBuilder.filter(QueryBuilders.termQuery(key1,value1));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4，将bool查询字段整合到整体的查询中"><a href="#4，将bool查询字段整合到整体的查询中" class="headerlink" title="4，将bool查询字段整合到整体的查询中"></a>4，将bool查询字段整合到整体的查询中</h2><p>将bool的queryBuilder放入到自定义的查询工具中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryBuilder.withQuery(boolQueryBuilder);</span><br></pre></td></tr></table></figure><h2 id="5，添加查询条件"><a href="#5，添加查询条件" class="headerlink" title="5，添加查询条件"></a>5，添加查询条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryBuilder.withQuery(query);</span><br></pre></td></tr></table></figure><p>springData强行要求分页展示必须至少展示1个，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryBuilder.withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="6，聚合分桶操作"><a href="#6，聚合分桶操作" class="headerlink" title="6，聚合分桶操作"></a>6，聚合分桶操作</h2><p>先在kibana中测试成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET goods/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"brands"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"brandId"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"category"</span>:&#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"categoryId"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"specs.CPU频率.keyword"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"categoryId"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7，按照specs之外的类来分"><a href="#7，按照specs之外的类来分" class="headerlink" title="7，按照specs之外的类来分"></a>7，按照specs之外的类来分</h2><p>即，brand与category来分</p><h3 id="分之前定义俩个字段"><a href="#分之前定义俩个字段" class="headerlink" title="分之前定义俩个字段"></a>分之前定义俩个字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String brandAggName = <span class="string">"brands"</span>;</span><br><span class="line">String categoryAggName = <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><h3 id="添加品牌-分类的聚合条件"><a href="#添加品牌-分类的聚合条件" class="headerlink" title="添加品牌/分类的聚合条件"></a>添加品牌/分类的聚合条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">queryBuilder.addAggregation(AggregationBuilders.terms(brandAggName).field(<span class="string">"brandId"</span>));</span><br><span class="line"></span><br><span class="line">queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">"categories"</span>));</span><br></pre></td></tr></table></figure><h3 id="再进行查询操作"><a href="#再进行查询操作" class="headerlink" title="再进行查询操作"></a>再进行查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AggregatedPage&lt;Goods&gt; goodsAggregatedPage = esTemplate.queryForPage(queryBuilder.bnuilder(), Godos<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>从查询到的所有结果中，取出所有的聚合结果</p><h3 id="参照kibana中的结果"><a href="#参照kibana中的结果" class="headerlink" title="参照kibana中的结果"></a>参照kibana中的结果</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">"aggregations": &#123;</span><br><span class="line">    "brands": &#123;</span><br><span class="line">      "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 1,</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">8557</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">79</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">18374</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">47</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">12669</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">25591</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">11</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">15127</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">9</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">2032</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">27306</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">91515</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">27094</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">38126</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    "specs.CPU频率.keyword": &#123;</span><br><span class="line">      "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 0,</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">76</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">181</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    "category": &#123;</span><br><span class="line">      "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 0,</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">76</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">181</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>故有</p><h2 id="8，先取出所有的聚合结果"><a href="#8，先取出所有的聚合结果" class="headerlink" title="8，先取出所有的聚合结果"></a>8，先取出所有的聚合结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aggregations aggregations = goodsAggregatedPage.getAggregations();</span><br></pre></td></tr></table></figure><p>类似于kibana中的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">"aggregations": &#123;</span><br><span class="line"> "brands": &#123;</span><br><span class="line">     "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 1,</span><br><span class="line">      "buckets": [</span><br><span class="line">           ]</span><br><span class="line">    &#125;,</span><br><span class="line">    "category": &#123;</span><br><span class="line">      "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 0,</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">             &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>得到之后，</p><h3 id="从桶中提出需要的聚合结果"><a href="#从桶中提出需要的聚合结果" class="headerlink" title="从桶中提出需要的聚合结果"></a>从桶中提出需要的聚合结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据聚合名称，获得聚合结果</span></span><br><span class="line">LongTerms brandTerms = aggregations.get(brandAggName);</span><br><span class="line">LongTerms categoryTerms = aggregations.get(categoryAggName);</span><br></pre></td></tr></table></figure><blockquote><p>LongTerms，原本并非是LongTerms类型，直接返回的话，实际上是Aggregation类型。但，LongTerms不局限于只有Long，还有String等，这里主要取决于取出的集合中，元素的类型。这边的brand/category在存储时，实际上并没有name的属性，只有Long类型的id，取出后需要进行二次加工，故，采用LongTerms</p></blockquote><h3 id="分桶聚合"><a href="#分桶聚合" class="headerlink" title="分桶聚合"></a>分桶聚合</h3><p>利用Stream流，拿到品牌/分类的id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; brandIds = brandTerms.getBuckets().stream()</span><br><span class="line">                .map(LongTerms.Bucket::getKeyAsNumber)</span><br><span class="line">                .map(Number::longValue)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">List&lt;Long&gt; categoryIds = categoryTerms.getBuckets().stream()</span><br><span class="line">                .map(LongTerms.Bucket::getKeyAsNumber)</span><br><span class="line">                .map(Number::longValue)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4 id="得到brandIds与categoryIds之后，便可以进行查询，因为前端要的是name而非id"><a href="#得到brandIds与categoryIds之后，便可以进行查询，因为前端要的是name而非id" class="headerlink" title="得到brandIds与categoryIds之后，便可以进行查询，因为前端要的是name而非id"></a>得到brandIds与categoryIds之后，便可以进行查询，因为前端要的是name而非id</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;?&gt;&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>这里使用LinkedHashMap主要是利用了LinkedHashMap的有序性。如下图：</p></blockquote><p><img src="https://i.loli.net/2020/01/08/R3nEtQvBzASGlch.png" alt="04_搜索选项进度.png"></p><p>这里是有顺序的，即按照插入顺序插入，那么前端取出来的时候也要保证顺序一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里做一个健壮性检查</span></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(brandIds)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.DATA_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">result.put(<span class="string">"分类"</span>, <span class="keyword">this</span>.itemClient.queryCategoryByIds(categoryIds));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(categoryIds)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.DATA_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">result.put(<span class="string">"品牌"</span>, <span class="keyword">this</span>.itemClient.queryBrandByIds(brandIds));</span><br></pre></td></tr></table></figure><p>至此，品牌与分类这俩个除specs之外的分类，已经查询到了。</p><h3 id="对比京东页面"><a href="#对比京东页面" class="headerlink" title="对比京东页面"></a>对比京东页面</h3><p><a href="https://i.loli.net/2020/01/08/DQyhLWU3bqRZViE.png" target="_blank" rel="noopener">https://i.loli.net/2020/01/08/DQyhLWU3bqRZViE.png</a></p><p>即黄色框中的内容已经完成。</p><h2 id="9，点选规格类"><a href="#9，点选规格类" class="headerlink" title="9，点选规格类"></a>9，点选规格类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先对categoryIds做一个健壮性检查</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != categoryIds &amp;&amp; categoryIds.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次过滤需要在之前已挑选过一次的基础上就属性各方面进行筛选</p><p>首先根据category分类id，查询一次数据库</p><p>确定当前可过滤条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> </span><br><span class="line">    NativeSearchQueryBuilder();</span><br><span class="line"></span><br><span class="line">queryBuilder.withPageable(PageRequest.of(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">queryBuilder.withQuery(query);</span><br><span class="line"></span><br><span class="line">List&lt;SpecParamDTO&gt; specParamDTOS = </span><br><span class="line">    <span class="keyword">this</span>.itemClient.queryParams(<span class="keyword">null</span>, cid, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>根据数据库中查询到的可搜索字段</p><p>遍历添加specs.*.keyword之后，在ElasticSearch中查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环添加聚合条件</span></span><br><span class="line">        specParamDTOS.forEach(specParamDTO -&gt; &#123;</span><br><span class="line">            <span class="comment">//可搜索规格参数的名称，也是聚合的名称</span></span><br><span class="line">            String name = specParamDTO.getName();</span><br><span class="line">            queryBuilder.addAggregation(AggregationBuilders.terms(name).field(<span class="string">"specs."</span>+name+<span class="string">".keyword"</span>));</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行聚合查询</span></span><br><span class="line">        AggregatedPage&lt;Goods&gt; goodsAggregatedPage = <span class="keyword">this</span>.esTemplate.queryForPage(queryBuilder.build(), Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>查询完成之后</p><h3 id="获取所有的聚合"><a href="#获取所有的聚合" class="headerlink" title="获取所有的聚合"></a>获取所有的聚合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aggregations aggregations = goodsAggregatedPage.getAggregations();</span><br></pre></td></tr></table></figure><p>循环遍历聚合</p><p>获取每一个name的聚合结果，并添加到map集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">specParamDTOS.forEach(specParamDTO -&gt; &#123;</span><br><span class="line">            String name = specParamDTO.getName();</span><br><span class="line">            <span class="comment">//根据聚合名称获取聚合结果</span></span><br><span class="line">            StringTerms stringTerms = aggregations.get(name);</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; options = stringTerms.getBuckets().stream()</span><br><span class="line">                    .map(StringTerms.Bucket::getKeyAsString)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把解析出来的结果封装返回到页面中</span></span><br><span class="line">            result.put(name,options);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>至此，效果完全实现</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring总结</title>
      <link href="/2019/11/07/spring%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/07/spring%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<center>关于spring学习的一些总结</center><a id="more"></a><h1 id="一、spring中的IoC"><a href="#一、spring中的IoC" class="headerlink" title="一、spring中的IoC"></a>一、spring中的IoC</h1><h2 id="1、控制反转的思想"><a href="#1、控制反转的思想" class="headerlink" title="1、控制反转的思想"></a>1、控制反转的思想</h2><p>采用IoC（Inversion of Control，控制反转）的思想解决代码耦合问题。</p><p>简单的说就是引入工厂（第三者），将原来在程序中手动创建管理的依赖的UserDaoImpl对象，交给工厂来创建管理。</p><p>步骤一:提供userDAO实例对象的工厂</p><p>UserDAOFactory.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//提供获取对象的方法</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserDAOImpl <span class="title">getUserDAO</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//返回实例对象</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span>  UserDAOImpl();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤二: 修改UserServiceImpl中获得对象的方式</p><p>UserServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"UserServiceImpl-service层方法调用了"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//调用dao层的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     IUserDAO userDAO = new UserDAOImpl();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     userDAO.findUserByUsernameAndPassword();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//ioc方式:</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建工厂,利用工厂提供依赖的对象</span></span><br><span class="line"></span><br><span class="line">       UserDAOFactory userDAOFactory = <span class="keyword">new</span> UserDAOFactory();</span><br><span class="line"></span><br><span class="line">       UserDAOImpl userDAO = userDAOFactory.getUserDAO();</span><br><span class="line"></span><br><span class="line">       userDAO.findUserByUsernameAndPassword();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发现问题:工厂方法仍然需要返回具体类型的实例对象,存在代码耦合</strong></p><p>解决方案:使用反射技术传入具体类型的类字符串生产对象的实例:</p><p>UserDAOFactory.java:</p><p>//利用反射技术生产具体类型的实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Class.forName(<span class="string">"cn.itcast.spring.a_quickstart.UserDaoImpl"</span>).newInstance();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用反射方法获取对象</span></span><br><span class="line"></span><br><span class="line">       IUserDAO userDAO = (IUserDAO) userDAOFactory.getBean();</span><br><span class="line"></span><br><span class="line">       userDAO.findUserByUsernameAndPassword();</span><br></pre></td></tr></table></figure><p><strong>发现问题:类字符串是硬编码的,怎么动态的传入不同的类字符串呢?</strong></p><p>解决方案: 使用xml配置文件动态传入类字符串</p><p>IoC底层实现：工厂（设计模式）+ 反射（机制）+ 配置文件（xml）。</p><h2 id="2、spring核心配置文件-ApplicationContext-xml"><a href="#2、spring核心配置文件-ApplicationContext-xml" class="headerlink" title="2、spring核心配置文件(ApplicationContext.xml)"></a>2、spring核心配置文件(ApplicationContext.xml)</h2><p>ApplicationContext.xml的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bean: spring工厂创建的一个对象(反射机制)</span></span><br><span class="line"><span class="comment">id/name:对象的名字,可以用来引用或者获取对象, 一般为类名或接口名称的首字母小写</span></span><br><span class="line"><span class="comment">class:要创建的对象类型的类字符串,类名全路径</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.a_quickstart.UserDAOImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过spring工厂获取bean完成相关操作</p><p>在程序中创建spring工厂对象, 通过工厂对象加载spring的xml配置文件,生产配置文件中配置 的bean对应的对象</p><p>UserServiceImpl.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring配置方式,创建spring工厂,加载spring配置文件</span></span><br><span class="line"> ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"> <span class="comment">//从spring工厂中获取对象,通过bean的id/name</span></span><br><span class="line"> IUserDAO userDAO = (IUserDAO) ac.getBean(<span class="string">"userDAO"</span>);</span><br><span class="line"> userDAO.findUserByUsernameAndPassword();</span><br></pre></td></tr></table></figure><p><strong>发现问题:该方式虽然解决了类与类之间的耦合关系,但却需要在获取对象的时候创建spring工厂,有没有更方便获取对象的依赖的方法呢?</strong></p><h2 id="3、DI依赖注入的实现"><a href="#3、DI依赖注入的实现" class="headerlink" title="3、DI依赖注入的实现"></a>3、DI依赖注入的实现</h2><p>DI：Dependency Injection 依赖注入，在Spring工厂负责创建Bean对象(dao,service)时，动态的将一个对象(dao)注入(setter方法)到另一个对象(service)中.</p><p>Di的做法是:由Spring容器创建了Service、Dao对象，并且在配置中将Dao传入Service，那么Service对象就包含了Dao对象的引用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自己理解：</span><br><span class="line"><span class="code">依赖注入，就是说，主类A要实现一个功能x，而这个功能，即Java中所谓的方法，其实是类B中所具有的，</span></span><br><span class="line"><span class="code">那么，在类A调用这个功能x的时候，就会对类B产生依赖，此时，就需要将类B进行依赖注入，即，一种是</span></span><br><span class="line"><span class="code">在类A中，以set方法的方式，类传入类B，通过代码的执行，从而让类B注入到A中，让A具有操作这项功能，</span></span><br><span class="line"><span class="code">即，引用类B方法的能力。----&gt;是为依赖注入</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext直译为应用上下文，是用来加载Spring框架配置文件，来构建Spring的工厂对象，它也称之为Spring容器的上下文对象，也称之为Spring的容器。</span><br><span class="line">ApplicationContext 只是BeanFactory（Bean工厂，Bean就是一个java对象） 一个子接口：</span><br></pre></td></tr></table></figure><p>步骤一:将service对象也交给spring容器管理</p><p>applicationContext.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bean: spring工厂创建的一个对象(反射机制)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   id/name:对象的名字,可以用来引用或者获取对象, 一般为类名或接口名称的首字母小写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   class:要创建的对象类型的类字符串,类名全路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.a_quickstart.UserDAOImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.a_quickstart.UserServiceImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 注入对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- property 根据类中的setter方法进行属性注入 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- name:setter方法的后缀小写,比如setXxx 对应的name为xxx --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- ref:引用哪一个bean(对象),值为bean的id/name --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span> <span class="attr">ref</span>=<span class="string">"userDAO"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤二:在程序中定义属性提供setter方法：</p><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义属性</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> IUserDAO userDAO;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDAO</span><span class="params">(IUserDAO userDAO)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.userDAO = userDAO;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"UserServiceImpl-service层方法调用了"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//ioc:依赖注入</span></span><br><span class="line"></span><br><span class="line">       userDAO.findUserByUsernameAndPassword();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>步骤三:测试运行,此时获取对象必须从spring工厂获取(在spring容器配置中才有依赖注入,自己创建的对象没有注入依赖关系)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建service的示例</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//IUserService userService = new UserServiceImpl();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//userService.login();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建spring工厂,获取spring管理的对象</span></span><br><span class="line"></span><br><span class="line">      ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">      IUserService userService = (IUserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">      userService.login();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结(重点):</strong></p><p><strong>IOC:控制反转,将对象创建管理的权利交给spring容器,获取对象通过spring工厂创建</strong></p><p><strong>DI:在spring容器中创建管理多个对象,通过 property标签将对象注入到需要依赖的对象中</strong></p><p><strong>为什么不直接使用顶层接口对象来操作呢？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* BeanFactory 采取延迟加载，第一次getBean时才会实例化Bean</span><br><span class="line"></span><br><span class="line">* Beanfactory的用法：</span><br><span class="line"></span><br><span class="line">     BeanFactory ac &#x3D; new XmlBeanFactory(new FileSystemResource(&quot;D:\applicationContext.xml&quot;));</span><br><span class="line"></span><br><span class="line">* ApplicationContext是对BeanFactory扩展，提供了更多功能</span><br><span class="line"></span><br><span class="line">    国际化处理</span><br><span class="line"></span><br><span class="line">    事件传递</span><br><span class="line"></span><br><span class="line">    Bean自动装配</span><br><span class="line"></span><br><span class="line">    各种不同应用层的Context实现</span><br><span class="line"></span><br><span class="line">ApplicationContext 更加强大，所以现在开发基本没人使用。</span><br></pre></td></tr></table></figure><p>Bean获取的两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);    </span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取bean的两种方式</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.通过spring容器中bean的id/name获取</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//IUserService userService = (IUserService) ac.getBean("userService");</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//2.根据bean的类型或者bean接口的类型获取,一般使用接口类型</span></span><br><span class="line"></span><br><span class="line">      IUserService userService = (IUserService) ac.getBean(IUserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">      userService.login();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>常用根据名称获取（id/name）,即第一种方式，使用spring容器中的标识获取对象</p><p>如果根据类型获取，配置了多个类型的话，则抛出异常：</p><p>applicationContext.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"userService1"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.a_quickstart.UserServiceImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span> <span class="attr">ref</span>=<span class="string">"userDAO"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.a_quickstart.UserServiceImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 注入对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- property 根据类中的setter方法进行属性注入 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- name:setter方法的后缀小写,比如setXxx 对应的name为xxx --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- ref:引用哪一个bean(对象),值为bean的id/name --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span> <span class="attr">ref</span>=<span class="string">"userDAO"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、spring中的bean装配"><a href="#二、spring中的bean装配" class="headerlink" title="二、spring中的bean装配"></a>二、spring中的bean装配</h1><h2 id="1、实例化bean的四种方式"><a href="#1、实例化bean的四种方式" class="headerlink" title="1、实例化bean的四种方式"></a>1、实例化bean的四种方式</h2><h3 id="第一种方式-无参数构造器-（最常用）"><a href="#第一种方式-无参数构造器-（最常用）" class="headerlink" title="第一种方式 无参数构造器 （最常用）"></a>第一种方式 无参数构造器 （最常用）</h3><p>第一步：创建Bean1.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1。默认构造器(spring在创建bean的时候自动调用无参构造器来实例化，相当于new Bean1())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在spring容器applicationContext.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实例化 bean的四种方式 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 1.默认构造器实例化对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.b_xmlnewbean.Bean1"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>第三步:创建测试类获取bean对象</p><p>SpringTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建spring工厂</span></span><br><span class="line"></span><br><span class="line">      ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.默认构造器获取bean对象</span></span><br><span class="line"></span><br><span class="line">      Bean1 bean1 = (Bean1) ac.getBean(<span class="string">"bean1"</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(bean1);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种方式：-静态工厂方法"><a href="#第二种方式：-静态工厂方法" class="headerlink" title="第二种方式： 静态工厂方法"></a>第二种方式： 静态工厂方法</h3><p>第一步：创建Bean2.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.静态工厂方法构造：用来在初始化bean2的时候，可以初始化其他的东西</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：创建Bean2Factory.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态工厂</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态方法，用来返回对象的实例</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">getBean2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//在做实例化的时候，可以做其他的事情，即可以在这里写初始化其他对象的代码</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//Connection conn....</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：Spring的容器applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.静态工厂获取实例化对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- class:直接指定到静态工厂类, factory-method: 指定生产实例的方法, spring容器在实例化工厂类的时候会自动调用该方法并返回实例对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.b_xmlnewbean.Bean2Factory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>第四步：测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//先构建实例化获取spring的容器（工厂、上下文）</span></span><br><span class="line"></span><br><span class="line">       ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.静态工厂</span></span><br><span class="line"></span><br><span class="line">       Bean2 bean2=(Bean2) applicationContext.getBean(<span class="string">"bean2"</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(bean2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="第三种方式：-实例工厂方法"><a href="#第三种方式：-实例工厂方法" class="headerlink" title="第三种方式： 实例工厂方法"></a>第三种方式： 实例工厂方法</h3><p>第一步：创建Bean3.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三种bean，实例工厂方式创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：创建实例工厂Bean3Factory类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例工厂:必须new工厂--》bean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通的方法，非静态方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bean3 <span class="title">getBean3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//初始化实例对象返回</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：Spring容器的配置：applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3：实例工厂的方式实例化bean --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3Factory"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.b_xmlnewbean.Bean3Factory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- factory-bean相当于ref：引用一个bean对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3"</span> <span class="attr">factory-bean</span>=<span class="string">"bean3Factory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean3"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第四步：使用测试代码，进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//先构建实例化获取spring的容器（工厂、上下文）</span></span><br><span class="line"></span><br><span class="line">      ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.实例工厂</span></span><br><span class="line"></span><br><span class="line">      Bean3 bean3=(Bean3) applicationContext.getBean(<span class="string">"bean3"</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(bean3);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="第四种方式-FactoryBean方式"><a href="#第四种方式-FactoryBean方式" class="headerlink" title="第四种方式: FactoryBean方式:"></a>第四种方式: FactoryBean方式:</h3><p>第一步: 创建Bean4:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步: 创建Bean4Factory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean4Factory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Bean4</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//产生对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Bean4 <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Bean4();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步: 配置applicationContext.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--方式四:FactoryBean--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring在实例化对象的时候回判断是否该对象实现了FactoryBean接口,如果实现了就直接调用getObject()方法,并返回执行结果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean4"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.b_xmlnewbean.Bean4Factory"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>四种方式：</p><p><strong>第一种：最常用</strong></p><p>第二、第三种：一些框架初始化的时候用的多。</p><p>第四种:spring底层实现的比较多,整合其他框架</p><p>此处的装配仅是class由Java bean变成了spring bean。而没有涉及到属性装配的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">面试题:</span><br><span class="line"></span><br><span class="line">BeanFactory: spring工厂的顶层接口</span><br><span class="line"></span><br><span class="line">FactoryBean: 用来创建工厂中的某一个类型对象</span><br></pre></td></tr></table></figure><h1 id="三、bean的作用域"><a href="#三、bean的作用域" class="headerlink" title="三、bean的作用域"></a>三、bean的作用域</h1><table><thead><tr><th>类别</th><th align="left">说明</th></tr></thead><tbody><tr><td>singleton</td><td align="left">在Spring IoC容器中仅存在一个Bean实例，Bean以单例方式存在</td></tr><tr><td>prototype</td><td align="left">每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行 new XxxBean()</td></tr><tr><td>request</td><td align="left">每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td align="left">同一个HTTP Session共享一个Bean，不同Session使用不同Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>globalSession</td><td align="left">一般用于porlet应用环境，该作用域仅适用于WebApplicationContext</td></tr></tbody></table><p>项目开发中通常会使用：singleton 单例、 prototype多例</p><p>Singleton： 在一个spring容器中，对象只有一个实例。（默认值）</p><p>Prototype：在一个容器中，存在多个实例，每次返回一个新的实例</p><p>第一步：创建类SingletonBean.java和PrototypeBean.java</p><p>创建类SingletonBean.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例bean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"SingletonBean:实例化了单例"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类PrototypeBean.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多例bean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrototypeBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"--PrototypeBean实例化了多例的"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：定义spring容器，applicationContext.xml:</p><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       bean的作用范围</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       scope:配置作用范围的，默认值就是singleton单例</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单例 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id="singletonBean" class="cn.itcast.spring.c_xmlscope.SingletonBean" scope="singleton"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"singletonBean"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.c_xmlscope.SingletonBean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 多例 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"prototypeBean"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.c_xmlscope.PrototypeBean"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p>第三步：测试代码，创建SpringTest.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//newbean的方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//先构建实例化获取spring的容器（工厂、上下文）</span></span><br><span class="line"></span><br><span class="line">       ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//目标1：看看多次获取bean的时候，是不是同一个</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//目标2：看看bean什么时候初始化的</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取单例的bean：应该是同一个</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//单例：每次从spring容器中获取的对象，是同一个对象</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//单例初始化：是在spring容器初始化的时候，就初始化了</span></span><br><span class="line"></span><br><span class="line">       SingletonBean singletonBean1=(SingletonBean)applicationContext.getBean(<span class="string">"singletonBean"</span>);</span><br><span class="line"></span><br><span class="line">       SingletonBean singletonBean2=(SingletonBean)applicationContext.getBean(<span class="string">"singletonBean"</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(singletonBean1);</span><br><span class="line"></span><br><span class="line">       System.out.println(singletonBean2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取多例的bean：</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//多例：每次从spring容器中获取的对象，不是同一个对象</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//多例初始化：是在getBean的时候初始化，相当于每次getbean就是在new Bean（）</span></span><br><span class="line"></span><br><span class="line">       PrototypeBean prototypeBean1=(PrototypeBean)applicationContext.getBean(<span class="string">"prototypeBean"</span>);</span><br><span class="line"></span><br><span class="line">       PrototypeBean prototypeBean2=(PrototypeBean)applicationContext.getBean(<span class="string">"prototypeBean"</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(prototypeBean1);</span><br><span class="line"></span><br><span class="line">       System.out.println(prototypeBean2);      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、servlet的三层架构处理方式"><a href="#四、servlet的三层架构处理方式" class="headerlink" title="四、servlet的三层架构处理方式"></a>四、servlet的三层架构处理方式</h1><p>// servlet是依托于tomcat容器所存在的。<br>// servlet可以接收前端数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> throw ServletException </span>&#123;</span><br><span class="line">  doPost(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> throw ServletException </span>&#123;</span><br><span class="line">      <span class="comment">//接收前端发来的数据/方法等</span></span><br><span class="line">      String username = request.getparameter(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//交给service层处理</span></span><br><span class="line">      String userStr = userService.queryUserByusername(username);</span><br><span class="line">      <span class="comment">//这里已经经过了Service层的处理。即</span></span><br><span class="line">      <span class="comment">/**   service层的处理：</span></span><br><span class="line"><span class="comment">        public class UserServiceImpl impliment UserService&#123;</span></span><br><span class="line"><span class="comment">            private UserDao userDao = new UserDaoImpl();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">            public String queryUser(String username) &#123;</span></span><br><span class="line"><span class="comment">                List&lt;User&gt; userList = userDao.queryUserByusername(username);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                String userString = JSON.toJsonString(userList);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                return userString;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      //dao层的实现</span></span><br><span class="line"><span class="comment">      public class UserDaoImpl impliment UserDao &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        private JdbcTemplate jt = new JdbcTemplate();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        public List&lt;User&gt; queryUserByusername(String username) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            String sql = "select * from tb_user where username = ?";</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            return jt.queryForList(sql, new RowMapper&lt;&gt;(User.class), username);</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="comment">//返回json字符串</span></span><br><span class="line">      response.getWrite().println(userStr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####</p><h1 id="五、spring-springMVC-myBatise的三层实现"><a href="#五、spring-springMVC-myBatise的三层实现" class="headerlink" title="五、spring  springMVC   myBatise的三层实现"></a>五、spring springMVC myBatise的三层实现</h1><h2 id="Spring层实现"><a href="#Spring层实现" class="headerlink" title="Spring层实现"></a>Spring层实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="meta">@RequestController</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    ----</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 页面传的是json数据，后端使用map 或者 pojo时 需要加<span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">         * 基本类型 &amp; 数组 &amp; MultipartFile</span></span><br><span class="line"><span class="comment">         * 只要保持页面的参数名称和controller方法形参一致就不用加<span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">         * List 不管名字一不一样 必须加<span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    ----</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryByusername"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryByusername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.queryByusername(username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC层实现"><a href="#SpringMVC层实现" class="headerlink" title="SpringMVC层实现"></a>SpringMVC层实现</h2><p>//接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryByusername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>//实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">impliment</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryByusername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.queryByusername(username);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> userList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>//mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">  <span class="function">List&lt;User&gt; <span class="title">queryByusername</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis:"></a>mybatis:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"io.github.becounted.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>= <span class="string">"queryByusername"</span>&gt;</span></span><br><span class="line">  select * from tb_user where username = #&#123;username&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>//省略web.xml applicationContext.xml mybatis-config.xml等配置文件</p><h2 id="——配置文件——"><a href="#——配置文件——" class="headerlink" title="——配置文件——"></a>——配置文件——</h2><p>spring-mvc.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.web"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  allowed-origins="*"允许所有的域名都能访问</span></span><br><span class="line"><span class="comment">           allowed-methods="*"  允许所有的请求方式都能访问（GET POST DELETE PUT）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">allowed-origins</span>=<span class="string">"*"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">allowed-methods</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/blacktravel"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置SqlSessionFactory(告诉数据源是哪个，)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       告诉它我们sql文件在哪里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:mappers/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫描mapper接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.itheima.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2019/09/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<center>对于int一维数组的冒泡排序</center><a id="more"></a><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> * 俩俩比较相邻的两个数。</span><br><span class="line"> * 如果前面的那个数大于后面的数，则将前面的大数与后面的小数对调位置。</span><br><span class="line"> * 例如，有数组arr&#x3D;&#123;1,3,9,7,8,6,5&#125;;</span><br><span class="line"> * 当9与7相比较的时候，9&gt;7，且9在7之前，那么则将9的位置换到7的后面。</span><br><span class="line"> * 所谓的换位置也不是调换位置，仅仅只是将9这个值赋值给后面的角标，7赋值给前面的角标</span><br><span class="line"> * 即本例中，arr[3]&#x3D;9;arr[2]&#x3D;7;</span><br><span class="line"> * 这样俩俩换位之后，则可以得到数组的排序</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * 实现：</span><br><span class="line"> * 在实现中，可以按顺序先拿出来一个数，将这个数与后面的所有数比较，如果都没有比它小的，</span><br><span class="line"> * 那么这个数位置不变，再拿出第二个数，此时，这个第二个数不需要与第一个数进行比较。</span><br><span class="line"> * 因为第一个数已经和其他所有数都比较过了，在取其他剩下的数的时候，都不需要和第一个数进行比较了，</span><br><span class="line"> * 如此可以提高一定的效率。</span><br><span class="line"> * 由第一个数的规律可以得出，以后每次拿出的数，其实都是不需要和它前面的数相比较的。</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Becounted.Array;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayInt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先new一个非顺序数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//调用我们自己定义的排序方法进行排序</span></span><br><span class="line">        sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义排序方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *第一个for循环，表示每次从数组中拿出一个数，</span></span><br><span class="line"><span class="comment">     * i=0代表拿出数组中的第一个数，</span></span><br><span class="line"><span class="comment">     * 这个数准备与数组中其他所有数据进行比较</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * for循环嵌套，意思就是，</span></span><br><span class="line"><span class="comment">     * 第一个for循环指定一个数，第二个for循环需要将所有循环都跑一遍</span></span><br><span class="line"><span class="comment">     * 第二个for循环，表示拿剩下的所有数和第一个for中拿出的数来比较</span></span><br><span class="line"><span class="comment">     * 所以第二个for循环要从角标1开始，不然会有一次数据自己和自己的比较，没有意义</span></span><br><span class="line"><span class="comment">     * 第二个for循环的最大值不能超过(arr.length)这样在j=1时，不会出现角标越界的错误</span></span><br><span class="line"><span class="comment">     * 同时，还可以优化成(arr.length-i)，这样就让j排除了i已经取过的角标，</span></span><br><span class="line"><span class="comment">     * 进一步增加了速度。</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j - <span class="number">1</span>];</span><br><span class="line">                    arr[j - <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//增强for循环遍历打印排序后的数组arr</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口做参数</title>
      <link href="/2019/09/16/%E6%8E%A5%E5%8F%A3%E5%81%9A%E5%8F%82%E6%95%B0/"/>
      <url>/2019/09/16/%E6%8E%A5%E5%8F%A3%E5%81%9A%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<center>接口做参数提高代码拓展性</center><a id="more"></a><p>​ 这是在慕课网上看的一个关于类加载器的讲解视频看到的。在没有使用IDE的情况下，使用notepad与cmd的组合，将编译与加载分开。在加载时，加载主类与拓展类，提高代码拓展性。下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuKuW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class aClass = Class.forName(args[<span class="number">0</span>]);</span><br><span class="line">            OfficeAble officeAble = (OfficeAble) aClass.newInstance();</span><br><span class="line">            officeAble.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拓展类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">OfficeAble</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"word start."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OfficeAble</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 这里将<code>OfficeAble</code>这个接口作为参数，并且将<code>aClass.newInstance();</code>的返回值类型<code>Object o</code>强转为<code>OfficeAble oa</code>。<br>​ 且调用了<code>OfficeAble</code>接口的<code>oa.start();</code>方法，此时相当于预留了一个<code>OfficeAble</code>的接口。<br>之后无论想要加载什么。只需要重新写一个类，实现了<code>OfficeAble</code>接口的start方法，就可以在<code>MuKuW</code>这个类加载时，动态的选择加载需要的那个实现了<code>OfficeAble</code>的类。从而提高程序的扩展性。</p><p>​ 在<code>cmd</code>中输入<code>java MuKuW Word</code>得到<code>PS D:\muke&gt; java MuKuW Word</code>同时会显示出<code>word start.</code>，即在<code>MuKuW</code>这个类加载的时候，我们有选择的加载了word这个拓展。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> interface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器ClassLoader</title>
      <link href="/2019/09/11/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8ClassLoader/"/>
      <url>/2019/09/11/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8ClassLoader/</url>
      
        <content type="html"><![CDATA[<center>类加载器的原理简单理解</center><a id="more"></a><p>首先理解，Java里面所有的类都是Class类的对象。</p><p>​ 先明确Java设计class这个类，用于虚拟机对类的管理。当一个类被虚拟机装载完毕的时候，就会创建一个class类的实例这句话。其意思是：当.java文件被编译成.class文件时，被送到JVM虚拟机，当.class文件出现在方法区时，即表明这个类被虚拟机装载完毕了。此时会从字节码中创建一个class对象。这里是从堆区中创建一个对象，用来封装类在方法区的数据结构。也就是这个堆区中的对象，其中包含了一切该.class文件的信息(包括其中的方法和成员变量)。</p><p>​ 然后开始走处理流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TEst</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student;<span class="comment">//Student类创建省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① Test.java文件首先被编译器拿到，进行编译成为JVM可以识别的.class文件。</p><p>​ 这一步编译器调用了java/lib等类库中的包，来解析Test.java文件。</p><p>② 得到.class文件后，此时就需要类加载器，来将.class文件送入到JVM虚拟机中。</p><p>③ 通过上面的编译器调用不同的包，(调用jre/lib/rt.jar时，会使用系统类加载器加载)。</p><p>​ 这里的加载器选择也会不同。但是这个过程不是判定得来的，而是通过双亲委派模型实现的。</p><hr><p>这里提一下双亲委派模型。</p><p>​ 双亲委派模型（Parents Delegation Model）要求除了顶层的启动类加载器外，其余加载器都应当有自己的父类加载器。类加载器之间的父子关系，通过组合关系复用。<br>​ 工作过程：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有到父加载器反馈自己无法完成这个加载请求（它的搜索范围没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p>​ ——以上定义及工作过程来源于《深入理解Java虚拟机(第2版)》·周志明 著</p><p>如图</p><p><img src="https://i.loli.net/2020/01/08/AnVJRD8beP73XZg.png" alt="1568199917608.png"></p><hr><p>④ 在类加载器将类加载到内存的方法区中时，此时类的加载完成了。</p><p>⑤ JVM会就当前的.class文件生成这个文件的对象，该对象是方法区中这个类的各种数据的访问接口。即这个对象涵盖了方法区中这个类的一切。</p><p>一个图总结一下：</p><p><img src="https://i.loli.net/2020/01/08/rbZuRQlsWOKEXiA.png" alt="1568200112366.png"></p><p>​ 以上是对类加载器的一些浅显理解，真是过程可能更复杂，同时类加载器的功能及应用上还涉及到一些反射和泛型相关内容。这里仅仅只是单纯从理论上抽取出类加载器的工作路径。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList与数据输入查询案例</title>
      <link href="/2019/09/08/ArrayList%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E8%AF%A2%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/09/08/ArrayList%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E8%AF%A2%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<center>数据分割、设置与查询</center><a id="more"></a><h1 id="1-要求："><a href="#1-要求：" class="headerlink" title="1.要求："></a>1.要求：</h1><h2 id="资料描述："><a href="#资料描述：" class="headerlink" title="资料描述："></a><strong>资料描述：</strong></h2><p>​ 资料一：在提供的test项目中，分别提供了实体类ServiceInfo、接口ServiceManager、测试类Demo等三个java文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类ServiceInfo</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请补充完整实体类ServiceInfo，用来封装文件中每一行数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceInfo</span> </span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口ServiceManager</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务管理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据端口号，查询该端口号对应的应用程序相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 参数，端口号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回该端口号对应的ServiceInfo对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ServiceInfo <span class="title">getServiceInfo</span><span class="params">(String port)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类Demo</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ServiceManager实现类对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.从控制台录入一个端口号</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.调用ServiceManager实现类对象的getServiceInfo方法，根据端口号，查询出对应的ServiceInfo对象；</span></span><br><span class="line">        <span class="comment">//4.判断第三步返回的结果，如果为null，则在控制台输出："您查询的端口号不存在";如果不为null，则打印该对象中的内容到控制台</span></span><br></pre></td></tr></table></figure><p>​ 资料二：在提供test项目中<strong>service.txt</strong>有如下内容，做出解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;service.txt</span><br><span class="line">#主机名 ip地址 端口号 应用程序名</span><br><span class="line"></span><br><span class="line">#数据库mysql的默认端口号为3306</span><br><span class="line">Host 127.0.0.1 3306 mysql</span><br><span class="line"></span><br><span class="line">#数据库oracle的默认端口号为1521</span><br><span class="line">Hpay 192.168.1.1 1521 oracle</span><br><span class="line"></span><br><span class="line">#数据库redis的默认端口号是6379</span><br><span class="line">Hgun 192.168.2.3 6379 redis</span><br></pre></td></tr></table></figure><p>1.每一行以 “#”开头的是注释文字，以 “#” 开头的行和空行为非有效数据行；</p><p>2.每一个有效数据行都分为4列，每列之间用空格分隔；</p><p>3.从左往右，第一列描述的是<strong>主机名</strong>，第二列描述的是<strong>ip地址</strong>，第三列描述的是<strong>端口号</strong>，第四列描述的是<strong>应用程序名</strong></p><p>4.service.txt文件的编码格式为 <strong>utf-8</strong>;</p><h1 id="2-需求："><a href="#2-需求：" class="headerlink" title="2.需求："></a><strong>2.需求：</strong></h1><p>1.补充实体类ServiceInfo，定义成员变量并提供setter和getter方法，用来封装service.txt文件中的每一行数据；</p><p>2.定义ServiceManager接口的实现类，重写getServiceInfo方法，根据传递的端口，查出对应的应用程序信息，该应用程序信息来自于service.txt文件中；</p><p>3.在Demo测试类中，完成测试，要求控制台录入一个端口号，可以查询出该端口号对应的应用程序信息，具体步骤，请参照Demo类中的注释步骤；</p><h1 id="3-分析："><a href="#3-分析：" class="headerlink" title="3.分析："></a>3.分析：</h1><p>其实才拿到题目的时候是有点懵的，感觉给的信息特别多。</p><p>这里稍微捋一下：</p><h2 id="Ⅰ-需求一"><a href="#Ⅰ-需求一" class="headerlink" title="Ⅰ. 需求一"></a>Ⅰ. 需求一</h2><ol><li>首先，其实要求描述那里可以先不看，直接先看需求，需求中第一步需要我们干三件事</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.把ServiceInfo类中的数据补充完整。</span><br><span class="line">2.定义成员变量并且提供get&#x2F;set方法。</span><br><span class="line">3.封装service.txt中的数据。</span><br></pre></td></tr></table></figure><ol start="2"><li>不难看出，这些要求都在透露着，SerciveInfo类是一个实体类。所以，先可以写出ServiceInfo类的部分代码:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.becounted.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请补充完整实体类ServiceInfo，用来封装文件中每一行数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="keyword">private</span> String exe;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExe</span><span class="params">(String exe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exe = exe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + ip + <span class="string">" "</span> + port + <span class="string">" "</span> + exe;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>封装service.txt中的数据，这里其实一开始有点迷糊。这个封装是想让我干什么。也是有了两种想法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 直接将service中的有效数据放到一个ServiceInfo的一个实现类&#x2F;静态方法中，形成三个SerciceInfo对象。</span><br><span class="line">2. 利用字节流、转换流、字符流读取一行的特性。再利用正则表达式切割。将数据利用set方法放入到ServiceInfo对象中。</span><br></pre></td></tr></table></figure><p>最终选择了第二种方法。因为第一种方法似乎和service.txt没有多少关系，甚至后面一段对于service.txt的数据解释也没怎么用得上。而第二种方法这里会用上之前的set方法，后面比较的时候，也会用上数据的get方法，虽然用的不是很多，但终归是用到了，那么相比于方法一而言，更切合需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ServiceInfo&gt; <span class="title">dropIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ServiceInfo&gt; serviceInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"D:\\Java_Project\\Demo\\src\\service.txt"</span>));</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String len = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!len.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!len.startsWith(<span class="string">"#"</span>)) &#123;</span><br><span class="line">                        strings.add(len);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">                String[] s1 = string.split(<span class="string">" "</span>);</span><br><span class="line">                ServiceInfo serviceInfo = <span class="keyword">new</span> ServiceInfo();</span><br><span class="line">                serviceInfo.setName(s1[<span class="number">0</span>]);</span><br><span class="line">                serviceInfo.setIp(s1[<span class="number">1</span>]);</span><br><span class="line">                serviceInfo.setPort(s1[<span class="number">2</span>]);</span><br><span class="line">                serviceInfo.setExe(s1[<span class="number">3</span>]);</span><br><span class="line">                serviceInfos.add(serviceInfo);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serviceInfos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​ 这里用了俩个集合，一个String字符串集合用来存放筛选后的service.txt中的有效数据。而第二个ServiceInfo的对象集合则用来存被放正则切割后的String字符串中每一个ServiceInfo对象数据，在经过set方法后，形成有数据的ServiceInfo对象。即，对本题目前而言，第二个<code>ArrayList&lt;ServiceInfo&gt;</code>数组存放了三个有数据的ServiceInfo对象。</p><h2 id="Ⅱ-需求二"><a href="#Ⅱ-需求二" class="headerlink" title="Ⅱ. 需求二"></a>Ⅱ. 需求二</h2><p>定义ServiceManager接口的实现类，重写getServiceInfo方法，根据传递的端口，查出对应的应用程序信息，该应用程序信息来自于service.txt文件中</p><p>同样的，第二个需求中依旧是有三个要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 定义ServiceManager接口的实现类；</span><br><span class="line">2. 重写getServiceInfo方法；</span><br><span class="line">3. 第三个要求更像是对重写该方法的一个要求；根据传递的端口，查出对应的应用程序信息，该应用程序信息来自于service.txt文件中。</span><br></pre></td></tr></table></figure><p>需求二中的第三个要求也印证了上面的猜想，即，数据的来源一定要是在service.txt中。这也符合程序设计的规范—易维护。</p><p>所以下面放ServiceManager接口的实现类ServiceM的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.becounted.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceM</span> <span class="keyword">implements</span> <span class="title">ServiceManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInfo <span class="title">getServiceInfo</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        ServiceInfo info = <span class="keyword">new</span> ServiceInfo();</span><br><span class="line">        ArrayList&lt;ServiceInfo&gt; serviceInfos = ServiceInfo.dropIn();</span><br><span class="line">        <span class="keyword">for</span> (ServiceInfo serviceInfo : serviceInfos) &#123;</span><br><span class="line">            <span class="keyword">if</span> (serviceInfo.getPort().equals(port)) &#123;</span><br><span class="line">                info = serviceInfo;</span><br><span class="line">                <span class="keyword">return</span> info;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                info = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-完整代码展示"><a href="#4-完整代码展示" class="headerlink" title="4.完整代码展示"></a>4.完整代码展示</h1><p>实体类ServiceInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.becounted.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请补充完整实体类ServiceInfo，用来封装文件中每一行数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="keyword">private</span> String exe;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExe</span><span class="params">(String exe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exe = exe;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写了toString方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + ip + <span class="string">" "</span> + port + <span class="string">" "</span> + exe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ServiceInfo&gt; <span class="title">dropIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String字符串集合用于接收service.txt中传来的有效数据。</span></span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//ServiceInfo对象集合用于存放从strings集合中获取的对象。</span></span><br><span class="line">        ArrayList&lt;ServiceInfo&gt; serviceInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里使用转换流和一个匿名的字节流将数据转换成字符流并调用BufferedReader的特有方法readLine读取一行数据。</span></span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"D:\\Java_Project\\Demo\\src\\service.txt"</span>));</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String len = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//首先排除service.txt中的空行</span></span><br><span class="line">                <span class="keyword">if</span> (!len.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">//再排除service.txt中的以#开头的注解行</span></span><br><span class="line">                    <span class="keyword">if</span> (!len.startsWith(<span class="string">"#"</span>)) &#123;</span><br><span class="line">                        <span class="comment">//之后得到的有效数据加入到strings集合中</span></span><br><span class="line">                        strings.add(len);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历集合</span></span><br><span class="line">            <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">                <span class="comment">//使用正则表达式，以空格为分界切割字符串</span></span><br><span class="line">                <span class="comment">//例如：Host 127.0.0.1 3306 mysql</span></span><br><span class="line">                String[] s1 = string.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="comment">//分割后的String string = &#123;"Host", "127.0.0.1", "3306", "mysql"&#125;;</span></span><br><span class="line">                <span class="comment">//创建ServiceInfo对象</span></span><br><span class="line">                ServiceInfo serviceInfo = <span class="keyword">new</span> ServiceInfo();</span><br><span class="line">                <span class="comment">//依次将分割后的字符串内容拿取到ServiceInfo对象中</span></span><br><span class="line">                serviceInfo.setName(s1[<span class="number">0</span>]);<span class="comment">//Host</span></span><br><span class="line">                serviceInfo.setIp(s1[<span class="number">1</span>]);<span class="comment">//127.0.0.1</span></span><br><span class="line">                serviceInfo.setPort(s1[<span class="number">2</span>]);<span class="comment">//3306</span></span><br><span class="line">                serviceInfo.setExe(s1[<span class="number">3</span>]);<span class="comment">//mysql</span></span><br><span class="line">                <span class="comment">//将得到的新对象存放到对象集合中</span></span><br><span class="line">                serviceInfos.add(serviceInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回对象集合。</span></span><br><span class="line">        <span class="keyword">return</span> serviceInfos;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ServiceManager接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.becounted.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务管理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据端口号，查询该端口号对应的应用程序相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 参数，端口号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回该端口号对应的ServiceInfo对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ServiceInfo <span class="title">getServiceInfo</span><span class="params">(String port)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceManager接口的实现类ServiceM类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.becounted.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceM</span> <span class="keyword">implements</span> <span class="title">ServiceManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写接口中的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInfo <span class="title">getServiceInfo</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ServiceInfo对象</span></span><br><span class="line">        ServiceInfo info = <span class="keyword">new</span> ServiceInfo();</span><br><span class="line">        <span class="comment">//由于ServiceInfo类中的dropIn方法是static静态方法，故直接使用ServiceInfo类名调用返回值是一个ServiceInfo的对象集合。</span></span><br><span class="line">        ArrayList&lt;ServiceInfo&gt; serviceInfos = ServiceInfo.dropIn();</span><br><span class="line">        <span class="comment">//遍历该集合</span></span><br><span class="line">        <span class="keyword">for</span> (ServiceInfo serviceInfo : serviceInfos) &#123;</span><br><span class="line">            <span class="comment">//通过get方法，拿到getPort端口号，对比参数port端口号是否一致</span></span><br><span class="line">            <span class="keyword">if</span> (serviceInfo.getPort().equals(port)) &#123;</span><br><span class="line">                info = serviceInfo;</span><br><span class="line">                <span class="keyword">return</span> info;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                info = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按照题目要求，一致则返回ServiceInfo的对象</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.becounted.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ServiceManager实现类对象</span></span><br><span class="line">        ServiceM m = <span class="keyword">new</span> ServiceM();</span><br><span class="line">        <span class="comment">//2.从控制台录入一个端口号</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个端口号："</span>);</span><br><span class="line">        String s = sc.next();</span><br><span class="line">        <span class="comment">//3.调用ServiceManager实现类对象的getServiceInfo方法，根据端口号，查询出对应的ServiceInfo对象；</span></span><br><span class="line">        ServiceInfo serviceInfo = m.getServiceInfo(s);</span><br><span class="line">        <span class="comment">//4.判断第三步返回的结果，如果为null，则在控制台输出："您查询的端口号不存在";如果不为null，则打印该对象中的内容到控制台</span></span><br><span class="line">        <span class="keyword">if</span> (serviceInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"您查询的端口号不存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            System.out.println(serviceInfo.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h1><p>这是小测试中的一道题，测试的时候一直没想到要用集合来收集ServiceInfo类的对象，导致一直陷入一个死胡同里面，最后得出的答案是数据和未找到数据提示一起出现在控制台的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入一个端口号：</span><br><span class="line"><span class="number">3306</span></span><br><span class="line">Host <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">3306</span> mysql</span><br><span class="line">您查询的端口号不存在</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这样的结果肯定是不可用的。所以交了白卷……</p><p>回来之后想了半个小时便出来了，而在考场上接近2个小时的时间也没想出来怎么解决这个问题，只是一直在ServiceManager接口的实现类ServiceM类那里想办法，思路上犯了很大的问题。</p><p>这是一道不算严谨的实践题吧。但是用到的方法还是挺多的。</p><p>希望以后能多遇到点这样的题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Case </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类与匿名内部类</title>
      <link href="/2019/09/04/%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2019/09/04/%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<center>内部类与匿名内部类总结<a id="more"></a><h1 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>将一个类A定义在另一个类B内，那么里面的类A就称为<strong>内部类</strong>，类B则称为<strong>外部类</strong>。</p><p>内部类分为<code>成员内部类</code>和<code>局部内部类</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">成员内部类：在一个类的成员位置上定义的类，即类中方法外。</span><br><span class="line">局部内部类：在一个类中的方法内定义的类。</span><br><span class="line"></span><br><span class="line">成员内部类：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 外部类类名 </span>&#123;</span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 内部类类名 </span>&#123;</span><br><span class="line">属性</span><br><span class="line">行为</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">局部内部类：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 外部类类名 </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">修饰符 返回值类型 Method(参数列表) &#123;</span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 内部类类名 </span>&#123;</span><br><span class="line">属性</span><br><span class="line">行为</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的使用"><a href="#内部类的使用" class="headerlink" title="内部类的使用"></a>内部类的使用</h2><h3 id="成员内部类的对象创建与方法调用"><a href="#成员内部类的对象创建与方法调用" class="headerlink" title="成员内部类的对象创建与方法调用"></a><strong>成员内部类的对象创建与方法调用</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象创建</span></span><br><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类名().<span class="keyword">new</span> 内部类名();</span><br><span class="line"><span class="comment">//方法调用</span></span><br><span class="line">对象名.内部类方法;</span><br></pre></td></tr></table></figure><h3 id="局部内部类的对象创建和方法调用"><a href="#局部内部类的对象创建和方法调用" class="headerlink" title="局部内部类的对象创建和方法调用"></a><strong>局部内部类的对象创建和方法调用</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象创建 其使用类似于一个局部变量。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Day03_InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">new</span> Method();</span><br><span class="line">        method.innerMethod();<span class="comment">//20局部内部类执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = <span class="number">20</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">innerClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(m + <span class="string">"局部内部类执行"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.innerclassmethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、匿名内部类"><a href="#二、匿名内部类" class="headerlink" title="二、匿名内部类"></a>二、匿名内部类</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><strong>匿名内部类：</strong>就是内部类的简化写法。本质上是一个<code>带有具体实现的</code> <code>父类/父接口的</code> <code>匿名的</code>子类对象。</p><p><strong>匿名内部类</strong></p><p>匿名=没有名字——&gt;即没有变量名接收该类；</p><p>内部类=局部内部类——&gt;即是在一个类的内部充当方法使用；</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类名|接口名 对象名 = <span class="keyword">new</span> 父类名|接口名() &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    要重写的方法</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>简化子类定义和子类对象创建的过程，能够将一个父类|父接口的子类|实现类的定义和对象的创建一次性表示完毕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//普通的多态写法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        person.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类的使用</span></span><br><span class="line">        <span class="comment">//idea中可使用alt+insert键实现快速重写@override</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"老师吃食堂"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.eat();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类的多态使用"><a href="#匿名内部类的多态使用" class="headerlink" title="匿名内部类的多态使用"></a>匿名内部类的多态使用</h2><p><strong>匿名内部类的语法一定是多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用到的父类/父接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*****************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人要吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*****************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通类匿名内部类的多态"><a href="#普通类匿名内部类的多态" class="headerlink" title="普通类匿名内部类的多态"></a>普通类匿名内部类的多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">匿名内部类的对象赋值给一个父类类的变量</span><br><span class="line">         Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"助教老师在吃KFC"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">         */</span><br><span class="line">        Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"助教老师在吃KFC"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        p.eat();</span><br></pre></td></tr></table></figure><h3 id="抽象类匿名内部类的多态"><a href="#抽象类匿名内部类的多态" class="headerlink" title="抽象类匿名内部类的多态"></a>抽象类匿名内部类的多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类匿名内部类的多态</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"猪吃饲料"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br></pre></td></tr></table></figure><h3 id="接口匿名内部类的多态"><a href="#接口匿名内部类的多态" class="headerlink" title="接口匿名内部类的多态"></a>接口匿名内部类的多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口匿名内部类的多态</span></span><br><span class="line">        MyInterface myInterface = <span class="keyword">new</span> MyInterface()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部实现类重写了接口的method方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        myInterface.method();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></center>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Inner Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File类复制文件</title>
      <link href="/2019/09/01/File%E7%B1%BB%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
      <url>/2019/09/01/File%E7%B1%BB%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<center>File类复制文件实践</center><a id="more"></a><h1 id="一、File类概述"><a href="#一、File类概述" class="headerlink" title="一、File类概述"></a>一、File类概述</h1><p><code>java.io.File</code>类是文件和目录路径名的抽象表示。包含了获得一个文件/目录的属性，以及对文件/目录进行改名和删除的方法。</p><h2 id="1-1构造方法"><a href="#1-1构造方法" class="headerlink" title="1.1构造方法"></a>1.1构造方法</h2><ul><li><code>public File(String pathname)</code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。</li><li><code>public File(String parent, String child)</code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个File对象代表硬盘中实际存在的一个文件或者目录。</span><br><span class="line"></span><br><span class="line">无论该路径下是否存在文件或者目录，都不影响File对象的创建。</span><br></pre></td></tr></table></figure><h2 id="1-2常用方法"><a href="#1-2常用方法" class="headerlink" title="1.2常用方法"></a>1.2常用方法</h2><ul><li><code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</li><li><code>public String getPath()</code> ：将此File转换为路径名字符串。</li><li><code>public String getName()</code> ：返回由此File表示的文件或目录的名称。</li><li><code>public long length()</code> ：返回由此File表示的文件的长度。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API中说明，length()，表示文件的长度。但是当File对象表示目录时，则返回值未指定。</span><br></pre></td></tr></table></figure><ul><li><p><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</p></li><li><p><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</p></li><li><p><code>public boolean isFile()</code> ：此File表示的是否为文件。</p></li><li><p>public boolean createNewFile()` ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</p></li><li><p><code>public boolean delete()</code> ：删除由此File表示的文件或目录。</p></li><li><p><code>public boolean mkdir()</code> ：创建由此File表示的目录。</p></li><li><p><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</p></li></ul><h2 id="1-3目录的遍历"><a href="#1-3目录的遍历" class="headerlink" title="1.3目录的遍历"></a>1.3目录的遍历</h2><ul><li><p><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</p></li><li><p><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用listFiles方法的File对象，必须是实际存在的目录，否则返回null，并且无法进行遍历。</span><br></pre></td></tr></table></figure><h1 id="二、字节输入流"><a href="#二、字节输入流" class="headerlink" title="二、字节输入流"></a>二、字节输入流</h1><h2 id="2-1入门使用"><a href="#2-1入门使用" class="headerlink" title="2.1入门使用"></a>2.1入门使用</h2><p>顶层父类：<code>InputStream</code> ,是一个抽象类，定义了输入流的相关的方法在这里定义。</p><p>常用的子类：<code>FileInputStream</code></p><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>: 关闭资源</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>:读取一个字节，并返回。如果读取完毕，返回一个-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span>:一次读取多个字节放到字节数组bytes中，返回有效读取的字节个数，如果读取完毕返回-1.</span></span><br></pre></td></tr></table></figure><h2 id="2-2使用步骤"><a href="#2-2使用步骤" class="headerlink" title="2.2使用步骤"></a>2.2使用步骤</h2><p>1）创：创建输入流对象==[需要关联文件]==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String pathName)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileINputStream</span><span class="params">(File file)</span>:</span></span><br></pre></td></tr></table></figure><p>2）读：调用read方法读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>:读取一个字节，并返回。如果读取完毕，返回一个-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span>:一次读取多个字节放到字节数组bytes中，返回有效读取的字节个数，如果读取完毕返回-1.</span></span><br></pre></td></tr></table></figure><p>3）关：调用close方法关资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>: 关闭资源</span></span><br></pre></td></tr></table></figure><h1 id="三、字节流输出"><a href="#三、字节流输出" class="headerlink" title="三、字节流输出"></a>三、字节流输出</h1><h2 id="3-1入门使用"><a href="#3-1入门使用" class="headerlink" title="3.1入门使用"></a>3.1入门使用</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。</li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。</li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><h2 id="3-2-FileOutputStream类"><a href="#3-2-FileOutputStream类" class="headerlink" title="3.2 FileOutputStream类"></a>3.2 FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p><h3 id="3-2-1构造方法"><a href="#3-2-1构造方法" class="headerlink" title="3.2.1构造方法"></a>3.2.1构造方法</h3><ul><li>public FileOutputStream(File file)`：创建文件输出流以写入由指定的 File对象表示的文件。</li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><h3 id="3-2-2写出字节数据"><a href="#3-2-2写出字节数据" class="headerlink" title="3.2.2写出字节数据"></a>3.2.2写出字节数据</h3><p><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">      fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">      fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h3 id="3-2-3写出字节数组"><a href="#3-2-3写出字节数组" class="headerlink" title="3.2.3写出字节数组"></a>3.2.3写出字节数组</h3><p><strong>字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">"黑马程序员"</span>.getBytes();</span><br><span class="line">      <span class="comment">// 写出字节数组数据</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑马程序员</span><br></pre></td></tr></table></figure><h3 id="3-2-4写出指定长度字节数组"><a href="#3-2-4写出指定长度字节数组" class="headerlink" title="3.2.4写出指定长度字节数组"></a>3.2.4写出指定长度字节数组</h3><p><strong>指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h1 id="四、复制文件"><a href="#四、复制文件" class="headerlink" title="四、复制文件"></a>四、复制文件</h1><p>​ 以上内容都是为这个实践案例做的理论准备。之前学的时候听老师说觉得很简单，但是当自己开始实践的时候发现各种问题都来了，故记录下来总结一下相关的注意事项，防止自己以后再犯。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备工作：我的<code>D:\abc</code>下面是我为这次实践准备的一些文件夹和文件。</p><p><img src="https://i.loli.net/2020/01/08/3V8fxqhmNrZOuDM.png" alt="1567353675324.png"></p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>​ 首先利用File类构建出源文件夹和目标文件夹的对象。之后遍历源文件夹，判断其内部内容是否是文件或文件夹，是文件夹的话暂时忽略(下一篇总结文件夹如何进行拷贝(复制))，如果是文件，那么利用FileInputStream这个InputStream的实现类读取文件，并将文件通过byte数组遍历,同时用FileOutputStream这个OutputStream的实现类将文件写入到目标文件夹中。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将D盘下abc文件夹中的所有文件(包括文件夹)复制到github文件夹下。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.io.FileNotFoundException: D:\GitHub (拒绝访问。)</span></span><br><span class="line"><span class="comment">    只用String表示名称而没有路径就会报出拒绝访问的错误。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//原始文件夹</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\abc"</span>);</span><br><span class="line">        <span class="comment">//目标文件夹</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:"</span> + File.separator + <span class="string">"GitHub"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file1.exists()) &#123;</span><br><span class="line">            file1.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历原始文件夹</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file2 : files) &#123;</span><br><span class="line">            <span class="comment">//如果原始文件夹内遍历出的是文件</span></span><br><span class="line">            <span class="keyword">if</span> (file2.isFile()) &#123;</span><br><span class="line">                FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file2);</span><br><span class="line">                FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file1.getPath()+File.separator+file2.getName());</span><br><span class="line">                System.out.println(file1.getPath()+File.separator+file2.getName());</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = fileInputStream.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                    fileOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这之中犯了不少错误，其中最重要的一个就是file文件名的路径是指路径还是只是String字符串，亦或者是只有文件名，即通过<code>getName</code>方法获得的名称。</p><p><code>File.separator</code>是一种相对通用的连接写法。当俩个地址之间相连接的时候，在Windows系统下使用”/“或”\\&quot;均可，但是在Unix下可能并行不通。考虑到兼容性问题，故采用Java自身的方法来进行连接，该方法可根据系统类型自动判断与之相兼容的符号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> File </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字</title>
      <link href="/2019/08/30/static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/08/30/static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<center>Java中static关键字的学习总结<a id="more"></a><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>static是静态修饰符，一般修饰类中成员。被static修饰的成员属于类，叫类成员。其不属于此类的单个对象。但是会影响该类的每个对象。static修饰的成员变量/方法被多个对象共享。</p><h1 id="2-定义"><a href="#2-定义" class="headerlink" title="2. 定义"></a>2. 定义</h1><p>当 <code>static</code> 修饰成员变量时，该变量称为<strong>类变量或静态变量</strong>。静态变量将变量值存储在一个公共的内存地址，该类的每个对象都<strong>共享</strong>同一个类变量的值。该类的任何对象都可以更改该类变量的值，且如果该类的某一个对象修改了静态变量的值，那么同一个类的所有对象都会受到影响。也可以在不创建该类的对象的情况下对类变量进行操作。</p><p><strong>注意：</strong>1.<code>使用&quot;类名.方法名(参数)&quot;的方式调用静态方法</code>。<code>使用&quot;类名.静态变量&quot;的方式访问静态变量</code>可以提高代码的可读性。</p><p>​ 2.类中的常量是被该类的所有对象所共享的。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 数据类型 变量名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String name;</span><br></pre></td></tr></table></figure><p>#3.使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.Javaee.Demo06_Object_book_805;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    静态变量被类中的所有对象所共享。</span></span><br><span class="line"><span class="comment">    静态方法不能访问类中的实例成员(实例数据域和方法)</span></span><br><span class="line"><span class="comment">    实例变量是属于类的某个特定实例的，不能被同一个类的不同对象所共享。</span></span><br><span class="line"><span class="comment">    类中的常量是被该类的所有对象所共享的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo805_static_variable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">        System.out.println(Circle.number);</span><br><span class="line">        Circle c1 = <span class="keyword">new</span> Circle();</span><br><span class="line">        System.out.println(<span class="string">"After c1 "</span>);</span><br><span class="line">        System.out.println(c1.number);</span><br><span class="line"></span><br><span class="line">        Circle c2 = <span class="keyword">new</span> Circle(<span class="number">5</span>);</span><br><span class="line">        c1.radius = <span class="number">9</span>;</span><br><span class="line">        System.out.println(<span class="string">"After c2"</span>);</span><br><span class="line">        System.out.println(c1.number);</span><br><span class="line">        System.out.println(c2.number);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面开始根据这个类创建对象。</span></span><br><span class="line"><span class="comment">//下面是Cir所创建的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Circle() &#123;</span><br><span class="line">        radius = <span class="number">1</span>;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circle(<span class="keyword">double</span> newRadius) &#123;</span><br><span class="line">        radius = newRadius;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius * radius * Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-静态代码块"><a href="#3-静态代码块" class="headerlink" title="3.静态代码块"></a>3.静态代码块</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Static</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Student 类的静态代码块"</span>);          <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student 类的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String methodName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在"</span>+methodName+<span class="string">"创建Student对象调用的"</span>);        <span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例(对象)成员变量</span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(<span class="string">"成员变量显式初始化的时候"</span>);        <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Test 类的静态代码块"</span>);             <span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main方法"</span>);                   <span class="comment">//1</span></span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"main方法中"</span>);</span><br><span class="line"><span class="comment">//创建Test对象</span></span><br><span class="line">        Test1 t = <span class="keyword">new</span> Test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-简单的内存原理图"><a href="#4-简单的内存原理图" class="headerlink" title="4.简单的内存原理图"></a>4.简单的内存原理图</h1><p><code>static</code> 修饰的内容：</p><ul><li><p>是随着类的加载而加载的，且只加载一次。</p></li><li><p>存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。</p></li><li><p>它优先于对象存在，所以，可以被所有对象共享。</p></li></ul><p><img src="https://i.loli.net/2020/01/08/AKw9eGv826hfSiD.jpg" alt="1.jpg"></p></center>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和多态</title>
      <link href="/2019/08/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%A4%9A%E6%80%81/"/>
      <url>/2019/08/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<center>Java中接口和多态的学习总结<a id="more"></a><h1 id="一、接口"><a href="#一、接口" class="headerlink" title="一、接口"></a>一、接口</h1><p>​ 接口是Java语言中的一种引用类型，是方法的集合，与类内部封装了成员变量、构造方法、成员方法等不同的是，接口内部主要封装了方法。在JDK7即之前，接口中只能有抽象方法，而到了JDK8，接口中可以包含默认方法和静态方法。在JDK9中，又新增了可以包含静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; <span class="comment">//静态方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; <span class="comment">//默认方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; <span class="comment">//私有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="含有抽象方法接口的使用"><a href="#含有抽象方法接口的使用" class="headerlink" title="含有抽象方法接口的使用"></a>含有抽象方法接口的使用</h2><p><strong>格式</strong>. <code>修饰符 abstract 返回值类型 方法名(参数列表)；</code></p><p><strong>使用</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.接口不能直接创建对象，必须定义一个实现类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.实现类必须重写接口中所有的抽象方法。</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Eat food."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.在测试类中创建实现类对象，对象可以调用抽象方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        animal.eat(); <span class="comment">//Eat food.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="含有静态方法接口的使用"><a href="#含有静态方法接口的使用" class="headerlink" title="含有静态方法接口的使用"></a>含有静态方法接口的使用</h2><p><strong>格式</strong>. <code>修饰符 static 返回值类型 方法名(参数列表)；</code></p><p><strong>使用</strong>. 静态内容和对象无关，只与接口/类有关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在接口中定义静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StaticMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Eat food."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.直接在测试类中通过接口名调用方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticMethod.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>接口中的静态方法一定只跟当前接口有滚，直接使用接口名调用各自的静态方法。</p><h2 id="含有默认方法接口的使用"><a href="#含有默认方法接口的使用" class="headerlink" title="含有默认方法接口的使用"></a>含有默认方法接口的使用</h2><p><strong>格式</strong>. <code>修饰符 default 返回值类型 方法名(参数列表)；</code></p><p><strong>使用</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在接口中定义默认方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Eat food."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.接口的实现类可以有选择地重写默认方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Interface_Method</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写了接口的默认方法method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i = 20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.在测试类中通过创建实现类对象来调用接口的默认方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student().method();<span class="comment">//i = 20</span></span><br><span class="line">        <span class="keyword">new</span> Student().method1();<span class="comment">//Eat food.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子类继承父类实现接口方法优先级"><a href="#子类继承父类实现接口方法优先级" class="headerlink" title="子类继承父类实现接口方法优先级"></a>子类继承父类实现接口方法优先级</h2><p>Java中，<code>类与类之间: 单继承。</code> <code>类与接口之间: 多实现。</code></p><p><strong>子类继承实现的优先级</strong></p><p>1.父类中有与接口的抽象方法重名的方法，先继承给子类，默认重 写了接口的抽象方法。</p><p>2.父类中有与接口的默认方法重名的方法，先继承给子类，默认重写了接口的默认方法。</p><p>3.子类先继承父类的内容，再实现接口中的内容，如果有相同的方法，默认父类重写了接口中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//无论这里是不是抽象方法，只要与父类重名，默认都被重写了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> <span class="keyword">implements</span> <span class="title">Interface_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        zi.method();<span class="comment">//Fu类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h2><h3 id="接口中的成员特点"><a href="#接口中的成员特点" class="headerlink" title="接口中的成员特点"></a>接口中的成员特点</h3><ul><li>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰。</li><li>接口中，没有构造方法，不能创建对象。</li><li>接口中，没有静态代码块。</li></ul><h1 id="二、多态"><a href="#二、多态" class="headerlink" title="二、多态"></a>二、多态</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><p><strong>多态</strong>： 是指同一行为，具有多个不同表现形式。</p><p><strong>前提</strong>：</p><ul><li>继承或者实现</li><li>方法的重写</li><li>父类引用指向子类对象</li></ul><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ul><li>父类 对象名 = new 子类();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Zi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口 对象名 = new 实现类();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Stirng[] args)</span> </span>&#123;</span><br><span class="line">        MyInterface myInterface = <span class="keyword">new</span> Demo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态中成员访问特点"><a href="#多态中成员访问特点" class="headerlink" title="多态中成员访问特点"></a>多态中成员访问特点</h2><ul><li>编译看左边(成员变量和成员方法),运行看右边(成员方法)</li><li><strong>成员变量</strong> : 创建对象时，=左边是谁，就优先使用谁的成员变量，没有则向上找</li><li><strong>成员方法</strong> : 创建对象时，=右边new的是谁就优先使用谁的成员方法，如果没有则向上找</li></ul><h2 id="多态的好处和弊端"><a href="#多态的好处和弊端" class="headerlink" title="多态的好处和弊端"></a>多态的好处和弊端</h2><p>好处：扩展性高,父类或者接口作为参数时,可以接收任意的子类或者实现类。</p><p>弊端：只能调用父类或者接口的共性方法,不能调用子类的特有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">D0</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物吃东西"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">D0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物玩"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat();<span class="comment">//多态的体现</span></span><br><span class="line">        animal.D0();</span><br><span class="line">        animal.Eat();</span><br><span class="line">        ((Cat) animal).Method();</span><br><span class="line">        <span class="comment">//animal.Method();会报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Miao~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h2><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat();<span class="comment">//多态的体现</span></span><br><span class="line">        animal.D0();</span><br><span class="line">        animal.Eat();</span><br><span class="line">        ((Cat) animal).Method();</span><br><span class="line">         &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Miao~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*引用上文中的例子，</span></span><br><span class="line"><span class="comment">Animal animal = new Cat();</span></span><br><span class="line"><span class="comment">就是一种向上转型的形式。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat();<span class="comment">//多态的体现</span></span><br><span class="line">        animal.D0();</span><br><span class="line">        animal.Eat();</span><br><span class="line">        ((Cat) animal).Method();</span><br><span class="line">         &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Miao~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同样是该例。</span></span><br><span class="line"><span class="comment">((Cat) animal).Method();</span></span><br><span class="line"><span class="comment">这就是一种向下转型的强转，将父类类型animal向下转成Cat类型</span></span><br><span class="line"><span class="comment">从而让animal可以调用Cat的独有方法。解决了多态的弊端</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 向下转型是有风险的，可能会报出类型转换异常<code>ClassCastException</code>的错误</p></center>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2019/08/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/08/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center>Java中继承和抽象的学习总结<a id="more"></a><p>1.创建一个class类</p><p>2.封装一些私有属性与方法</p><p>3.提供无参/有参构造方法以及私有属性的set/get方法</p><p>4.在测试类中调用构造方法创建对象</p><h3 id="匿名对象："><a href="#匿名对象：" class="headerlink" title="匿名对象："></a>匿名对象：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Student(<span class="string">"Lisa"</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>没有对象名接收的对象（没有把对象地址值赋值给某个变量）</p><p>仅可使用一次</p><p>每次使用都需要重新创建。</p><p>可以作为方法的参数和返回值使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methed</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//做方法的参数</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Student();<span class="comment">//做方法的返回值</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">publice <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承的格式</span></span><br></pre></td></tr></table></figure><h3 id="继承后的成员变量"><a href="#继承后的成员变量" class="headerlink" title="继承后的成员变量"></a>继承后的成员变量</h3><p>子类能够直接操作父类的非私有的成员变量(下面代码验证)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">======父类=======</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extends_Variate</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person lisa = <span class="keyword">new</span> Person(<span class="string">"Lisa"</span>, <span class="number">23</span>,<span class="string">"woman"</span>);</span><br><span class="line">        System.out.println(lisa.sex);</span><br><span class="line">        <span class="comment">//sex不是private修饰的，</span></span><br><span class="line">        <span class="comment">//所以子类对象lisa可以直接调用。</span></span><br><span class="line">        System.out.println(lisa.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承后的成员方法"><a href="#继承后的成员方法" class="headerlink" title="继承后的成员方法"></a>继承后的成员方法</h3><p>子类可以重写父类的成员方法<code>@Override</code>标记此方法是否重写过。</p><p>查找方法先从子类找，子类有就用子类的，子类没有就去父类中找，父类中找到了就用。</p><p>子类父类都找不到就报错。(代码验证)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extends_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        animal.eat();<span class="comment">//eat something.</span></span><br><span class="line">        animal.Doit();<span class="comment">//Running</span></span><br><span class="line"></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.eat();<span class="comment">//eat dinner</span></span><br><span class="line">        dog.Doit();<span class="comment">//Running</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat lunch"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat something."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat dinner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承后的构造方法"><a href="#继承后的构造方法" class="headerlink" title="继承后的构造方法"></a>继承后的构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extends_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里隐藏了一个默认代码表示调用父类的无参构造</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, sex);<span class="comment">//这里初始化了父类的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super和this"><a href="#super和this" class="headerlink" title="super和this"></a>super和this</h3><ul><li><p><strong>super</strong> ：代表父类的<strong>存储空间标识</strong>(可以理解为父类的引用)。</p></li><li><p><strong>this</strong> ：代表<strong>当前对象的引用</strong>(谁调用就代表谁)。</p></li><li><p>继承中，如果this在本类子类中无法找到方法/变量时，会向父类中去查找。</p></li><li><p>继承中，如果super在本类父类中无法找到方法/变量时，不会去子类中找，会直接报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extends_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        System.out.println(dog.getAge());<span class="comment">//23</span></span><br><span class="line">        System.out.println(dog.getName());<span class="comment">//Lisa</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Lisa"</span>,<span class="number">23</span>,<span class="string">"woman"</span>);</span><br><span class="line">        <span class="comment">//可以在子类的无参构造下写入父类的构造方法即参数，此时，子类的无参构造方法，会得到父类super();括号中所写的参数。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h3><p><strong>1.</strong>Java中只支持单继承，不支持多继承，即一个子类只能有一个父类，不能有多个父类</p><p><strong>2.</strong>Java支持多层继承，即，<code>A extends B; B extends C</code></p><p><strong>3.</strong>Java中一个类可以有多个子类。</p><p><strong>注意：</strong>Java中Object是所有类的超类(父类)。</p></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>含有抽象方法的类都是抽象类；</p><p>反之，抽象类不一定有抽象方法。</p><p>使用<code>abstract</code>修饰的方法就是抽象方法</p><p>使用<code>abstract</code>修饰的类就是抽象类</p><p>代码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><p><strong>1.</strong>使用实现子类继承抽象类(即，子类重写了抽象方法)</p><p><strong>2.</strong>在测试类中创建子类对象以实现抽象类</p><p><strong>3.</strong>在测试类中重写抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstract</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        worker.work();<span class="comment">//Go to work!</span></span><br><span class="line">        Worker lisa = <span class="keyword">new</span> Worker(<span class="string">"Lisa"</span>, <span class="number">23</span>);</span><br><span class="line">        lisa.work();<span class="comment">//Go to work!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Go to work!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></center>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
